#!/bin/bash

touch email-body

if [[ "$1" == "DEBUG" ]]; then
  DEBUG=1
else
  DEBUG=0
fi

# Pre Script Settings#{{{
cd ~/Documents/git-repos/remote-github/shutterfly-data-extract-from-website

# Unset globbing
set -f

# Now readarray delimits with newlines
IFS='
'

# No case sensitivity for string matching
shopt -s nocasematch

readarray EMAILS < ./emails

# If debug is on, remove all emails except the first (which is mine)
NUM_OF_EMAILS=${#EMAILS[@]}
if (( $DEBUG == 1 )); then
  debug_count=0
  for((i=0;i<$NUM_OF_EMAILS;i++)); do
    echo "debug_count = $debug_count"
    if (( $debug_count > 0 )); then
      EMAILS[$i]=""
      echo "EMAILS[i] = $EMAILS[$i]"
    fi
    ((debug_count++))
  done
fi

touch fetched_home_page_html
rm -rf fetched_home_page_html

cp -f fetched_home_page_html fetched_home_page_tdtag_with_newline

#}}}

echo -e "https://www.shutterfly.com/promotions_details/\n\n" > email-body
echo "Downloading webpage: https://www.shutterfly.com/promotions_details/"
wget -O fetched_home_page_html "https://www.shutterfly.com/promotions_details/"

# Find new or missing cars on the lot#{{{

dos2unix fetched_home_page_html

# Remove all lines from html that are not necessary at all (before the parts we don't need, and after)#{{{

# Open fetched_home_page_html
declare -a ARRAY
exec 10<&0
fileName="fetched_home_page_html"
exec < $fileName
let count=0

# Each line gets stored in an array.
while read LINE; do
  ARRAY[$count]=$LINE
  ((count++))
done

exec 0<&10 10<&-

# Used to find the lines we need.
regex="<div class=\"headline\">[[:print:]]*</div>"
#}}}

# make tdtags file that contains only the useful information.#{{{

touch divtags_promos
rm -rf divtags_promos
touch divtags_promos

ELEMENTS=${#ARRAY[@]}
firstLine=0


for((i=0;i<$ELEMENTS;i++)); do
  if [[ ${ARRAY[${i}]} =~ $regex ]] ; then
    if [[ $firstLine<1 ]]; then
      echo ${BASH_REMATCH[0]} > divtags_promos
      let firstLine=$firstLine+1
    else
      echo ${BASH_REMATCH[0]} >> divtags_promos
    fi
  fi
done

# remove "<td>" from each line
sed -i "s@<div class=\"headline\">@@g" divtags_promos
# remove "</td>" from each line
sed -i "s@*</div>@@g" divtags_promos

#}}}

# Populate Arrays for the data for the new cars#{{{

# Open divtags_promos
declare -a PROMOS
exec 10<&0
fileName="divtags_promos"
exec < $fileName
let promo_count=0

while read LINE; do
  # Get car models
  PROMOS[$promo_count]=$LINE
  echo "line is: $LINE"
  ((promo_count++))
done

exec 0<&10 10<&-

#}}}



# Append new cars to email body#{{{

echo "PUT STUFF INTO EMAIL-BODY"
for PROMO in "${PROMOS[@]}"
do
  echo "Promo: $PROMO"
  echo "- $PROMO" >> email-body
done
#}}}
#}}}

# Email#{{{

# Used to echo if an email is commented
COUNT=0
echo "Sending emails..."
for EMAIL in "${EMAILS[@]}"
do
  # Used to echo if the line is commented
  COUNT=$((COUNT + 1))
  # Skip comments when parsing
  # Also if it is commented print to the log and console that it is commented.
  [[ ${EMAIL:0:1} == "#" ]] && echo "Line #$COUNT is Commented"  && continue
  # Skip empty lines when parsing
  [[ ${EMAIL:1:1} == "" ]] && continue

now=$(date +'%b %d, %Y')
mutt -s "Shutterfly Alert: $now" $EMAIL < email-body

  # -n removes trailing newlines
  echo -n "Sent to $EMAIL"
done

#}}}

# Cleanup#{{{

unset IFS
set +f

#}}}

